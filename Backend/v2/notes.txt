1. HASH THE PASSWORDS, this is going to be the first thing highlighted, as its super important to store passwords in a db hashed 
   (v1 is a "mock" or "model" to show proof of concepts, security is not nessisarily important in that version)
2. Refine dataset being used by project, prep for db storage, start breaking down what kind of 
   relationships will be needed for each class attribute being stored.
3. Copy Filestorage class and create a class that does the same things just with a database.
4. Utilize dbstorage over file storage everywhere through out the app.
5. Build out console.py to interact with dbstorage and file storage so data can be pulled from 
   file and stored in db, then viewed(this console will not be packaged with code that gets 
   deployed its more or less a tool for testing with more efficiency).
6. Refine security practices with cookies, tokens, and sessions if need be, ensure all routes are 
   locked down (maybe nmap could give us route insight on things we miss).
7. Create unit tests, configure CI


V1 Issues to address:
- Routing, using proper methods, routes, and idealogy to access data, ie /settings will utilize 'GET', 'PUT', and 'DELETE' or the children routes such as '/settings/view', '/settings/modify', etc...
- Password Hashing, using and securing databases for data storage(including best practices like env variables, etc), and ensuring raw input is always parsed, and taking a further step into session securtiy, utilizing best practices and what each thing is doing thats important.

- Create a gitbook entry for the v2 backend noting each feature below:
   Goal: Should cover more advanced topics, why the changes are happing and the benifit from the change between v1 and v2.

    - What the proper methods for routes are, how we make the change to account for it, and why its important
    - How to properlly store passwords in a database, some common methods, and best practices for hashing
    - Further dive into sessions, authentication, and cookies, what changes where made to improve performance/security and why these features are important and some things to watch for.
    - Why using a database is important, How scalability is affected, how to ustilize the database while ensureing it remains secure.
    - 